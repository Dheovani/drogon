/**
 *
 *  Profile.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Profile.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Profile::Cols::_id = "id";
const std::string Profile::Cols::_fullname = "fullname";
const std::string Profile::Cols::_email = "email";
const std::string Profile::Cols::_fone = "fone";
const std::string Profile::Cols::_account_id = "account_id";
const std::string Profile::Cols::_address_id = "address_id";
const std::string Profile::primaryKeyName = "id";
const bool Profile::hasPrimaryKey = true;
const std::string Profile::tableName = "profile";

const std::vector<typename Profile::MetaData> Profile::metaData_={
{"id","int64_t","bigint",8,1,1,1},
{"fullname","std::string","character varying",50,0,0,1},
{"email","std::string","character varying",100,0,0,1},
{"fone","std::string","character varying",20,0,0,0},
{"account_id","int64_t","bigint",8,1,0,1},
{"address_id","int64_t","bigint",8,1,0,1}
};
const std::string &Profile::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Profile::Profile(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["fullname"].isNull())
        {
            fullname_=std::make_shared<std::string>(r["fullname"].as<std::string>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["fone"].isNull())
        {
            fone_=std::make_shared<std::string>(r["fone"].as<std::string>());
        }
        if(!r["account_id"].isNull())
        {
            accountId_=std::make_shared<int64_t>(r["account_id"].as<int64_t>());
        }
        if(!r["address_id"].isNull())
        {
            addressId_=std::make_shared<int64_t>(r["address_id"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            fullname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            fone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            accountId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            addressId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

Profile::Profile(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fone_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            accountId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            addressId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

Profile::Profile(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("fullname"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["fullname"].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson["fullname"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("fone"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["fone"].isNull())
        {
            fone_=std::make_shared<std::string>(pJson["fone"].asString());
        }
    }
    if(pJson.isMember("account_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["account_id"].isNull())
        {
            accountId_=std::make_shared<int64_t>((int64_t)pJson["account_id"].asInt64());
        }
    }
    if(pJson.isMember("address_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["address_id"].isNull())
        {
            addressId_=std::make_shared<int64_t>((int64_t)pJson["address_id"].asInt64());
        }
    }
}

void Profile::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fone_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            accountId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            addressId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

void Profile::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("fullname"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["fullname"].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson["fullname"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("fone"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["fone"].isNull())
        {
            fone_=std::make_shared<std::string>(pJson["fone"].asString());
        }
    }
    if(pJson.isMember("account_id"))
    {
        if(!pJson["account_id"].isNull())
        {
            accountId_=std::make_shared<int64_t>((int64_t)pJson["account_id"].asInt64());
        }
    }
    if(pJson.isMember("address_id"))
    {
        if(!pJson["address_id"].isNull())
        {
            addressId_=std::make_shared<int64_t>((int64_t)pJson["address_id"].asInt64());
        }
    }
}

const int64_t &Profile::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Profile::getId() const noexcept
{
    return id_;
}
void Profile::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Profile::PrimaryKeyType & Profile::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Profile::getValueOfFullname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fullname_)
        return *fullname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Profile::getFullname() const noexcept
{
    return fullname_;
}
void Profile::setFullname(const std::string &pFullname) noexcept
{
    fullname_ = std::make_shared<std::string>(pFullname);
    dirtyFlag_[1] = true;
}
void Profile::setFullname(std::string &&pFullname) noexcept
{
    fullname_ = std::make_shared<std::string>(std::move(pFullname));
    dirtyFlag_[1] = true;
}

const std::string &Profile::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Profile::getEmail() const noexcept
{
    return email_;
}
void Profile::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[2] = true;
}
void Profile::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[2] = true;
}

const std::string &Profile::getValueOfFone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fone_)
        return *fone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Profile::getFone() const noexcept
{
    return fone_;
}
void Profile::setFone(const std::string &pFone) noexcept
{
    fone_ = std::make_shared<std::string>(pFone);
    dirtyFlag_[3] = true;
}
void Profile::setFone(std::string &&pFone) noexcept
{
    fone_ = std::make_shared<std::string>(std::move(pFone));
    dirtyFlag_[3] = true;
}
void Profile::setFoneToNull() noexcept
{
    fone_.reset();
    dirtyFlag_[3] = true;
}

const int64_t &Profile::getValueOfAccountId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(accountId_)
        return *accountId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Profile::getAccountId() const noexcept
{
    return accountId_;
}
void Profile::setAccountId(const int64_t &pAccountId) noexcept
{
    accountId_ = std::make_shared<int64_t>(pAccountId);
    dirtyFlag_[4] = true;
}

const int64_t &Profile::getValueOfAddressId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(addressId_)
        return *addressId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Profile::getAddressId() const noexcept
{
    return addressId_;
}
void Profile::setAddressId(const int64_t &pAddressId) noexcept
{
    addressId_ = std::make_shared<int64_t>(pAddressId);
    dirtyFlag_[5] = true;
}

void Profile::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Profile::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "fullname",
        "email",
        "fone",
    };
    return inCols;
}

void Profile::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFullname())
        {
            binder << getValueOfFullname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFone())
        {
            binder << getValueOfFone();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Profile::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Profile::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFullname())
        {
            binder << getValueOfFullname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFone())
        {
            binder << getValueOfFone();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Profile::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFullname())
    {
        ret["fullname"]=getValueOfFullname();
    }
    else
    {
        ret["fullname"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getFone())
    {
        ret["fone"]=getValueOfFone();
    }
    else
    {
        ret["fone"]=Json::Value();
    }
    if(getAccountId())
    {
        ret["account_id"]=(Json::Int64)getValueOfAccountId();
    }
    else
    {
        ret["account_id"]=Json::Value();
    }
    if(getAddressId())
    {
        ret["address_id"]=(Json::Int64)getValueOfAddressId();
    }
    else
    {
        ret["address_id"]=Json::Value();
    }
    return ret;
}

Json::Value Profile::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFullname())
            {
                ret[pMasqueradingVector[1]]=getValueOfFullname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[2]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFone())
            {
                ret[pMasqueradingVector[3]]=getValueOfFone();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAccountId())
            {
                ret[pMasqueradingVector[4]]=(Json::Int64)getValueOfAccountId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAddressId())
            {
                ret[pMasqueradingVector[5]]=(Json::Int64)getValueOfAddressId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFullname())
    {
        ret["fullname"]=getValueOfFullname();
    }
    else
    {
        ret["fullname"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getFone())
    {
        ret["fone"]=getValueOfFone();
    }
    else
    {
        ret["fone"]=Json::Value();
    }
    if(getAccountId())
    {
        ret["account_id"]=(Json::Int64)getValueOfAccountId();
    }
    else
    {
        ret["account_id"]=Json::Value();
    }
    if(getAddressId())
    {
        ret["address_id"]=(Json::Int64)getValueOfAddressId();
    }
    else
    {
        ret["address_id"]=Json::Value();
    }
    return ret;
}

bool Profile::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("fullname"))
    {
        if(!validJsonOfField(1, "fullname", pJson["fullname"], err, true))
            return false;
    }
    else
    {
        err="The fullname column cannot be null";
        return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(2, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err="The email column cannot be null";
        return false;
    }
    if(pJson.isMember("fone"))
    {
        if(!validJsonOfField(3, "fone", pJson["fone"], err, true))
            return false;
    }
    if(pJson.isMember("account_id"))
    {
        if(!validJsonOfField(4, "account_id", pJson["account_id"], err, true))
            return false;
    }
    if(pJson.isMember("address_id"))
    {
        if(!validJsonOfField(5, "address_id", pJson["address_id"], err, true))
            return false;
    }
    return true;
}
bool Profile::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Profile::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("fullname"))
    {
        if(!validJsonOfField(1, "fullname", pJson["fullname"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(2, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("fone"))
    {
        if(!validJsonOfField(3, "fone", pJson["fone"], err, false))
            return false;
    }
    if(pJson.isMember("account_id"))
    {
        if(!validJsonOfField(4, "account_id", pJson["account_id"], err, false))
            return false;
    }
    if(pJson.isMember("address_id"))
    {
        if(!validJsonOfField(5, "address_id", pJson["address_id"], err, false))
            return false;
    }
    return true;
}
bool Profile::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Profile::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
